#compdef zm
#autoload
typeset -A opt_args

_zm_files(){
	 local zm_file=$(<"$ZMARKS_DIR/zm_files")
	 _zm_list $zm_file
}

_zm_dirs(){
	 local zm_file=$(<"$ZMARKS_DIR/zm_dirs")
	 _zm_list $zm_file
}

_zm_all(){
	 local zm_file=$(<"$ZMARKS_DIR/zm_dirs" <"$ZMARKS_DIR/zm_files")
	 _zm_list $zm_file
}

_zm_list(){
	 local zm_file="$1"
	 local zm_array; zm_array=(${(f)zm_file});
	 local zm_name zm_path zm_line
	 zmarks=()
	 for zm_line in $zm_array; do
		 if [[ "$zm_line" == *"|"* ]] ; then
			 zm_path="${zm_line%%|*}"
			 zm_path="${zm_path/\$HOME/\~}"
			 zm_name="${zm_line#*|}"
			 zmarks+="${zm_name}:${zm_path}"
		 fi
	 done
	 _describe -t zmarks 'zmarks' zmarks && return
}

_zm_vi_cmds(){
	 local cachedir="${XDG_CACHE_HOME:-"$HOME/.cache"}"
	 local cache="$cachedir/zm_vi"

	 local cache_contents=$(<"$cache")
	 local all_cmds=(${(f)cache_contents})
	 local subset_cmds=() 

	 subset_cmds=(${(M)all_cmds:#${words[3]}*})

	 [[ ${#words[@]} -lt 3 ]] && subset_cmds="$all_cmds" \
			|| [[ "${#subset_cmds[@]}" -eq 0 ]] && return

		 _describe -t commands 'zmarks' subset_cmds && return
}

# TODO add optional _canonical_paths as third arg to -F[mark file]

_arguments \
	 '-j[Jump to dir or file]: :_zm_all' \
	 '-f[Jump to file]: :_zm_files' \
	 '-d[Jump to dir]: :_zm_dirs' \
	 '-s[Show all marks or matching pattern]: :_zm_all' \
	 '-r[Remove mark]: :_zm_all' \
	 '-F[Mark file]: :_files' \
	 '-D[Mark dir]: :(`basename $(pwd)`)' \
	 '-i[Jump to commands file]: :_zm_vi_cmds' \
	 '--clear-all[Clear all directory and file marks]: :' \
	 '--clear-all-files[Clear all file marks]: :' \
	 '--clear-all-dirs[Clear all directory marks]: :' \
	 '-h[Help]'
